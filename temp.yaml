# apiVersion: v1
# kind: Pod
# metadata:
#   name: pod-2-1
#   labels:
#     name: myapp
# spec:
#   containers:
#   - name: myapp
#     image: payara/server-full
#     resources:
#       limits:
#         memory: "128Mi"
#         cpu: "100m"
#     ports:
#       - containerPort: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: payara-full
spec:
  selector:
    matchLabels:
      app: myapp-pf
  replicas: 3
  template:
    metadata:
      labels:
        app: myapp-pf
    spec:
      containers:
      - name: payara-full-container
        image: payara/server-full
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
        ports:
        - containerPort: 80
---
# https://phoenixnap.com/kb/kubernetes-mysql
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: kubernetes.io/basic-auth
stringData:
  password: test1234
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim
--- 
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
    
    
---

# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: pi
# spec:
#   #ttlSecondsAfterFinished: 100
#   template:
#     spec:
#       containers:
#       - name: pi
#         image: perl
#         command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
#       restartPolicy: Never
#   backoffLimit: 4

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cj-pi
spec:
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: pi
            image: perl
            command: ["perl",  "-Mbignum=bpi", "-wle", "print bpi(2000)"]
          restartPolicy: Never
      backoffLimit: 4



---

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: microservice
# spec:
#   selector:
#     matchLabels:
#       app: microservice
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         app: microservice
#     spec:
#       containers:
#       - name: microservice-container
#         image: cazucito/poc_microservicio_slim:microprofile
#         resources:
#           limits:
#             memory: "128Mi"
#             cpu: "100m"
#         ports:
#         - containerPort: 80
apiVersion: apps/v1
kind: Deployment
metadata:
  name: servicio-rest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: servicio-rest
  template:
    metadata:
      labels:
        app: servicio-rest
        tier: backend
    spec:
      containers:
        - name: servicio-rest
          image: cazucito/poc_microservicio_slim:microprofile
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "400m"
          env:
            - name: GET_HOSTS_FROM
              value: dns
          ports:
            - containerPort: 8080
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: microservice
# spec:
#   type: NodePort
#   selector:
#     app: servicio-rest
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 30078

-----------

